generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  projects      Project[]
  likes         Like[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  editedAt      DateTime  @default(now())

  @@map("users")
}

model Project {
  id          String    @id @default(uuid())
  thumbnail   String
  name        String
  description String
  githubLink  String?
  previewLink String?
  techStack   String[]
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  likes       Int       @default(0) @map("likes")
  Likes       Like[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  editedAt    DateTime  @default(now())

  @@map("projects")
}

model Like {
  id        String   @id @default(uuid())
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  editedAt  DateTime @default(now())

  @@unique([userId, projectId]) 
  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  editedAt  DateTime @default(now())

  @@map("comments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
